apply plugin: 'com.android.library'

dependencies {
    compile 'jcifs:jcifs:1.3.17'
    compile 'com.android.support:support-v4:24.1.1'
}

import java.util.regex.Pattern

// map for the version code
ext.versionCodes = ['armeabi-v7a':1, 'x86':2]

import com.android.build.OutputFile

android {
    compileSdkVersion 24
    buildToolsVersion '24.0.2'

    useLibrary 'org.apache.http.legacy'

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 22
    }

    sourceSets.main {
        jniLibs.srcDir 'libs'
    }

    splits {
        abi {
            enable true
            reset()
            include 'armeabi-v7a', 'x86'
            universalApk true
        }
    }

    buildTypes {
        debug {
            jniDebuggable true           // Enable jni debug build
            zipAlignEnabled true
            minifyEnabled false
            signingConfig signingConfigs.debug
        }

        release {
            minifyEnabled false
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
    }
    
    // Do not abort build if lint finds errors
    lintOptions {
        abortOnError false
    }
}

apply plugin: 'base'

project.ext.PARAM_PARALLEL_TASK_COUNT = '-j' + (Runtime.runtime.availableProcessors() + 1)
project.ext.NDK_BUILD = android.getNdkDirectory().toString() + '/ndk-build'
if (System.properties['os.name'].toLowerCase().contains('windows'))
    project.ext.NDK_BUILD += ".cmd"

def archs = ['x86', 'armeabi-v7a-hard']
def buildTypes = [[ndkType: 'release', cppType: "production", flags : propReleaseNdkFlags], [ndkType: 'debug', cppType: "debug", flags : propDebugNdkFlags]]

buildTypes.each { type ->
    def suffix = type.ndkType.capitalize()
    createNdkBuildTask(type.ndkType, '', suffix, type.flags)

    archs.each { arch ->
        suffix = type.ndkType.capitalize() + arch.capitalize()
        createNdkBuildTask(type.ndkType, arch, suffix, type.flags)
    }
}

def createNdkBuildTask(buildType, arch, suffix, flags) {
    return tasks.create(name: "ndkBuild${suffix}", type: Exec, description: "Building ${buildType} version of jni. Arch : ${arch}") {
        def ndkParams = ([project.ext.NDK_BUILD, project.ext.PARAM_PARALLEL_TASK_COUNT] + flags.split(' ')).flatten()
        if (!arch.isEmpty())
            ndkParams += "NDK_ABI_TO_BUILD=${arch}"
        commandLine ndkParams
    }
}

task ndkBuildClean(type: Exec, description: 'Clean native jni libraries') {
    commandLine project.ext.NDK_BUILD, 'clean'
}

tasks.withType(JavaCompile) { compileTask ->
    if (compileTask.name.contains('Release') || compileTask.name.contains('Beta')) {
        compileTask.dependsOn ndkBuildRelease
    } else {
        compileTask.dependsOn ndkBuildDebug
    }
}

task cleanNative(type: Exec, description: 'Clean JNI object files') {
    def ndkDir = android.ndkDirectory
    commandLine "$ndkDir/ndk-build",
            '-C', file('jni').absolutePath,
            'clean'
}

clean.dependsOn 'cleanNative'
